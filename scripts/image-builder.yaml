AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  BuildInstanceType:
    Type: CommaDelimitedList
    Default: g4dn.2xlarge
    Description: >-
      Comma-delimited list of one or more instance types to select from when building
      the image. Image Builder will select a type based on availability. The supplied
      default is compatible with the AWS Free Tier.
  ResourcesStackName:
    Type: String
Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by instance during image build.
    Properties:
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSNSFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /executionServiceEC2Role/
  InstanceRoleLoggingPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: Allows the instance to save log files to an S3 bucket.
    Properties:
      PolicyName: ImageBuilderLogBucketPolicy
      Roles:
        - !Ref 'InstanceRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub
                - arn:${AWS::Partition}:s3:::${BUCKET}/*
                - BUCKET: !ImportValue
                    Fn::Sub: ${ResourcesStackName}-Bucket
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /executionServiceEC2Role/
      Roles:
        - !Ref 'InstanceRole'
  UbuntuServerImageInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub 'UbuntuServer20-Image-Infrastructure-Configuration-${AWS::StackName}'
      InstanceProfileName: !Ref 'InstanceProfile'
      InstanceTypes: !Ref 'BuildInstanceType'
      Logging:
        S3Logs:
          S3BucketName: !ImportValue
            Fn::Sub: ${ResourcesStackName}-Bucket
          S3KeyPrefix: !Join
            - '-'
            - - imagebuilder
              - !Ref 'AWS::StackName'
      SecurityGroupIds:
        - !ImportValue
          Fn::Sub: ${ResourcesStackName}-SecurityGroup
      SnsTopicArn: !Ref 'ImageBuilderSNSTopic'
  InstallEFSUtilsComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'EFSUtils-${AWS::StackName}'
      Version: '0.0.2'
      Description: Install the latest EFS Utils.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: InstallEFSUtils
        description: Downloads and Installs EFS Utils
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: Apt
                action: ExecuteBash
                inputs:
                  commands:
                    - "sudo apt-get update"
                    - "sudo apt-get -y install python3-pip awscli binutils jq zip"
              - name: InstallFolder
                action: ExecuteBash
                inputs:
                  commands:
                    - echo "$HOME/install"
              - name: CreateInstallFolder
                action: CreateFolder
                inputs:
                  - path: '{{ build.InstallFolder.outputs.stdout }}'
              - name: EFSUtils
                action: ExecuteBash
                inputs:
                  commands:
                    - "cd {{ build.InstallFolder.outputs.stdout }}"
                    - "git clone https://github.com/aws/efs-utils"
                    - "cd efs-utils"
                    - "sudo bash ./build-deb.sh"
                    - "sudo apt-get -y install ./build/amazon-efs-utils*.deb"
                    - "sudo -u ubuntu -i mkdir -p efs"
              - name: Cleanup
                action: DeleteFolder
                inputs:
                  - path: '{{ build.InstallFolder.outputs.stdout }}'
                    force: true
              - name: EFSFolder
                action: ExecuteBash
                inputs:
                  commands:
                    - echo "/home/ubuntu/efs"
              - name: CreateUbuntuUserEFSFolder
                action: CreateFolder
                inputs:
                  - path: '{{ build.EFSFolder.outputs.stdout }}'
                    owner: ubuntu
                    group: ubuntu
  InstallCFNInitComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'CFNInit-${AWS::StackName}'
      Version: '0.0.2'
      Description: Install the latest CFNInit.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: InstallCFNInit
        description: Downloads and Installs cfn init
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: InstallFolder
                action: ExecuteBash
                inputs:
                  commands:
                    - echo "$HOME/install"
              - name: CreateInstallFolder
                action: CreateFolder
                inputs:
                  - path: '{{ build.InstallFolder.outputs.stdout }}'
              - name: CFNInit
                action: ExecuteBash
                inputs:
                  commands:
                    - "cd {{ build.InstallFolder.outputs.stdout }}"
                    - "sudo curl -o awscfnboot.tar.gz https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz"
                    - "sudo tar -zxf awscfnboot.tar.gz"
                    - "sudo python3 -m pip install ./aws-cfn-bootstrap-2.0"
              - name: Cleanup
                action: DeleteFolder
                inputs:
                  - path: '{{ build.InstallFolder.outputs.stdout }}'
                    force: true
  InstallDeepRacerComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'DeepRacer-${AWS::StackName}'
      Version: '0.0.2'
      Description: Install the latest DeepRacer config.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: InstallDeepRacer
        description: Downloads and Installs deepracer community config
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: CloneCommunityRepo
                action: ExecuteBash
                inputs:
                  commands:
                    - "apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub"
                    - "sudo -u ubuntu -i git clone https://github.com/aws-deepracer-community/deepracer-for-cloud.git"
              - name: BuildFromCommunityRepo
                action: ExecuteBash
                inputs:
                  commands:
                    - "sudo -u ubuntu -i bash -c 'cd /home/ubuntu/deepracer-for-cloud && ./bin/prepare.sh'"
              - name: Reboot
                action: Reboot
                onFailure: Abort
                maxAttempts: 2
                inputs:
                  delaySeconds: 60
              - name: init
                action: ExecuteBash
                inputs:
                  commands:
                    - "sudo -u ubuntu -i bash -c 'cd /home/ubuntu/deepracer-for-cloud && ./bin/init.sh -c aws -a gpu'"
  CreateLogsComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'CreateLogScript-${AWS::StackName}'
      Version: '0.0.2'
      Description: Create Logs script.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: CreateLogs
        description: logs to s3
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: CopyLogs
                action: CreateFile
                inputs:
                  - path: /home/ubuntu/bin/create_logs.sh
                    permissions: 775
                    owner: ubuntu
                    group: ubuntu
                    content: |
                        #!/bin/bash
                        cd $DR_DIR/data/logs
                        rm *.log *.zip
                        echo hello;echo hello
                        for name in $(docker ps --format \{\{.Names}\}); do
                            docker logs ${name} >& ${name}.log
                        done
                        zip robomaker_log deepracer-0_robomaker.1.*.log
                        aws s3 cp robomaker_log.zip  s3://$DR_LOGS_COPY_S3_BUCKET/

  InstallDeepRacerDockerImagesScriptComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'DeepRacerDockerImagesScript-${AWS::StackName}'
      Version: '0.0.2'
      Description: Install the latest DeepRacer docker images script.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: InstallDeepRacerDockerImages
        description: Downloads and Installs deepracer docker images script
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: PullDeepracerDockerImagesScript
                action: CreateFile
                inputs:
                  - path: /home/ubuntu/bin/pull-docker-images.sh
                    permissions: 775
                    owner: ubuntu
                    group: ubuntu
                    content: |
                        REGISTRY=https://index.docker.io/v2
                        REGISTRY_AUTH=https://auth.docker.io
                        REGISTRY_SERVICE=registry.docker.io
                        IMAGE_NAME=""
                        DOCKER_BIN=docker
                        TAGS_FILTER=""
                        VERBOSE=0
                        TAGS_LIMIT=1
                        ignore_404=0

                        OPTIND=1

                        while getopts "n:f:v" opt; do
                            case "$opt" in
                            n)  IMAGE_NAME="$OPTARG"
                                ;;
                            f)  TAGS_FILTER="$OPTARG"
                                ;;
                            v)  VERBOSE=1
                                ;;
                            esac
                        done

                        shift $((OPTIND-1))

                        [ "${1:-}" = "--" ] && shift

                        if [ -z $IMAGE_NAME ]; then
                          echo Requires Image Name
                          exit 1;
                        else
                          if [[ $VERBOSE -eq 1 ]]; then
                             echo Using IMAGE_NAME: $IMAGE_NAME
                          fi
                        fi

                        function do_curl_get () {
                          local URL="$1"
                          shift
                          local array=("$@")
                          HTTP_RESPONSE="$(curl -sSL --write-out "HTTPSTATUS:%{http_code}" \
                            -H "Content-Type: application/json;charset=UTF-8" \
                            "${array[@]}" \
                            -X GET "$URL")"
                          # echo $HTTP_RESPONSE
                          HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
                          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
                          # Check that the http status is 200
                          if [[ "$HTTP_STATUS" -ne 200 ]]; then
                            if [[ "$ignore_404" -eq 0 ]]; then
                              if [[ "$VERBOSE" -eq 0 ]]; then
                                echo -e "\\nError $HTTP_STATUS from: $URL\\n"
                              else
                                echo -e "\\nError $HTTP_STATUS from: $URL\\nHTTP_BODY: $HTTP_BODY\\n"
                              fi
                            fi
                          fi
                        }

                        #  Get AUTH token
                        # This cannot be: ("")
                        CURL_AUTH=()
                        CURL_URL="$REGISTRY_AUTH/token?service=${REGISTRY_SERVICE##*(//)}&scope=repository:$IMAGE_NAME:pull"
                        do_curl_get "$CURL_URL" "${CURL_AUTH[@]}"
                        AUTH=$(echo "$HTTP_BODY" | jq --raw-output .token)

                        # Get Tags
                        CURL_AUTH=( -H "Authorization: Bearer $AUTH" )
                        CURL_URL="$REGISTRY/$IMAGE_NAME/tags/list"
                        do_curl_get "$CURL_URL" "${CURL_AUTH[@]}"
                        TAGS_CURL=$(echo "$HTTP_BODY")
                        TAGS_temp=$(echo "$TAGS_CURL"|jq --arg TAGS_FILTER "$TAGS_FILTER" -r '.tags[]|select(.|endswith($TAGS_FILTER))'|grep -vi windows|sort -r --version-sort)

                        TAG=$(echo "$TAGS_temp"|sed -n 1,"$TAGS_LIMIT"p)

                        docker pull $IMAGE_NAME:$TAG
  ExpandRootVolumeComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'ExpandRootVolume-${AWS::StackName}'
      Version: '0.0.2'
      Description: Expand root volume.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: ExpandRootVolume
        description: Expands root volume
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: ExpandRootVolume
                action: ExecuteBash
                inputs:
                  commands:
                    - |
                      id=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                      vol_id=$(aws ec2 describe-instances --region $(curl http://169.254.169.254/latest/meta-data/placement/region) --instance-ids $id --query 'Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId' --output text)
                      aws ec2 modify-volume --size 40 --volume-id $vol_id --region $(curl http://169.254.169.254/latest/meta-data/placement/region)
  PullDeepracerDockerImagesComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'PullDeepracerDockerImages-${AWS::StackName}'
      Version: '0.0.2'
      Description: Pull newest deepracer docker images.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: PullDeepracerDockerImages
        description: Pull deepracer docker images
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: PullDeepracerDockerImages
                action: ExecuteBash
                inputs:
                  commands:
                    - "bash -c '/home/ubuntu/bin/pull-docker-images.sh -n awsdeepracercommunity/deepracer-robomaker -v -f -gpu'"
                    - "bash -c '/home/ubuntu/bin/pull-docker-images.sh -n awsdeepracercommunity/deepracer-robomaker -v -f -cpu-avx2'"
                    - "bash -c '/home/ubuntu/bin/pull-docker-images.sh -n awsdeepracercommunity/deepracer-sagemaker -v -f -gpu'"
                    - "bash -c '/home/ubuntu/bin/pull-docker-images.sh -n awsdeepracercommunity/deepracer-rlcoach -v'"
                    - "bash -c '/home/ubuntu/bin/pull-docker-images.sh -n awsdeepracercommunity/deepracer-analysis -v -f cpu'"
  SafeTerminationComponent:
    Type: AWS::ImageBuilder::Component
    Properties:
      Name: !Sub 'SafeTermination-${AWS::StackName}'
      Version: '0.0.2'
      Description: Install script to terminate training and upload model.
      ChangeDescription: First version
      Platform: Linux
      Data: |
        name: SafeTermination
        description: terminates training
        schemaVersion: 1.0
        phases:
          - name: build
            steps:
              - name: SafeTermination
                action: CreateFile
                inputs:
                  - path: /home/ubuntu/bin/safe_termination.sh
                    permissions: 775
                    owner: ubuntu
                    group: ubuntu
                    content: |
                      #!/bin/bash
                      touch /home/ubuntu/bin/termination.started
                      . /home/ubuntu/deepracer-for-cloud/bin/activate.sh
                      # to avoid upload conflict, check if start_training script loop started dr-upload-model within last 30 seconds
                      start_training_uploading=$(find /home/ubuntu/bin/uploading_best_model.timestamp -mmin -0.5 -type f -print | wc -l)
                      if [[ $start_training_uploading -ge 1 ]];then
                        sleep 30
                      fi
                      dr-upload-model -bfw
                      dr-stop-training
  DistributionConfiguration:
    Type: 'AWS::ImageBuilder::DistributionConfiguration'
    Properties:
      Name: !Sub 'DistributionConfiguration-${AWS::StackName}'
      Distributions:
        - Region: !ImportValue
            Fn::Sub: ${ResourcesStackName}-Region
          AmiDistributionConfiguration:
            Name: !Join
              - '-'
              - - 'ami-dist-config'
                - !ImportValue
                    Fn::Sub: ${ResourcesStackName}-Region
                - '{{ imagebuilder:buildDate }}'
            LaunchPermissionConfiguration:
              UserGroups:
                - all
  UbuntuServerForDeepRacerImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub 'UbuntuServerForDeepRacer-${AWS::StackName}'
      Version: '0.0.2'
      ParentImage: !Sub 'arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:image/ubuntu-server-18-lts-x86/x.x.x'
      Components:
        - ComponentArn: !Ref 'CreateLogsComponent'
        - ComponentArn: !Ref 'SafeTerminationComponent'
        - ComponentArn: !Ref 'InstallEFSUtilsComponent'
        - ComponentArn: !Ref 'ExpandRootVolumeComponent'
        - ComponentArn: !Ref 'InstallDeepRacerDockerImagesScriptComponent'
        - ComponentArn: !Ref 'InstallCFNInitComponent'
        - ComponentArn: !Ref 'InstallDeepRacerComponent'
        - ComponentArn: !Ref 'PullDeepracerDockerImagesComponent'
  UbuntuServerImagePipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Description: DeepRacer image build pipeline
      ImageRecipeArn: !Ref 'UbuntuServerForDeepRacerImageRecipe'
      InfrastructureConfigurationArn: !Ref 'UbuntuServerImageInfrastructureConfiguration'
      DistributionConfigurationArn: !Ref 'DistributionConfiguration'
      Name: !Sub 'DeepRacerImageBuildPipeline-${AWS::StackName}'
      Tags:
        BuildStack: !Sub '${AWS::StackName}'
        Name: DeepRacer
      Schedule:
        PipelineExecutionStartCondition: EXPRESSION_MATCH_ONLY
        ScheduleExpression: cron(0 0 * * ? *)
  SNSPermissionToInvokeUpdateParameter:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'UpdateSSMParameter.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'ImageBuilderSNSTopic'
  SNSPermissionToInvokeDeleteOldAMIs:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'DeleteOldAMIs.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'ImageBuilderSNSTopic'
  ImageBuilderSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Image Builder
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt 'UpdateSSMParameter.Arn'
        - Protocol: lambda
          Endpoint: !GetAtt 'DeleteOldAMIs.Arn'
  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowServices
            Effect: Allow
            Principal: '*'
            Action:
              - sns:Publish
              - sns:Subscribe
            Resource: '*'
      Topics:
        - !Ref 'ImageBuilderSNSTopic'
  UpdateSSMParameter:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      InlineCode: !Sub |
        import json
        import boto3
        import logging 
        import os

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        ssm_client = boto3.client('ssm')
        ec2_client = boto3.client('ec2')
        ssm_parameter_name = os.getenv('ParameterPath')

        def handler(event, context):
            logger.info('Printing event: {}'.format(event))
            process_sns_event(event)
            return None

        def process_sns_event(event):
            for record in (event['Records']):
                event_message = record['Sns']['Message']

                message_json = json.loads(event_message)

                image_state = (message_json['state']['status'])

                if (image_state == 'AVAILABLE'):
                    logger.info('Image is available')

                    ami = message_json['outputResources']['amis'][0]
                    ec2_client.create_tags(Resources=[ami['image']], Tags=[{'Key': 'Name', 'Value': 'DeepRacer'}, {'Key': 'Stack', 'Value': '${AWS::StackName}'}])

                    recipe_name = message_json['name']
                    logger.info('AMI ID: {}'.format(ami['image']))

                    response = ssm_client.put_parameter(
                        Name=ssm_parameter_name,
                        Description='Latest AMI ID',
                        Value=ami['image'],
                        Type='String',
                        Overwrite=True,
                        Tier='Standard'
                        )
                    logger.info('SSM Updated: {}'.format(response))

                    #add tags to the SSM parameter
                    ssm_client.add_tags_to_resource(ResourceType='Parameter', ResourceId=ssm_parameter_name, Tags=[ { 'Key': 'Source', 'Value': 'Image Builder' } ] )
            return None

      Description: Update SSM Parameter with the latest AMI
      MemorySize: 256
      Timeout: 300
      AutoPublishAlias: live
      Environment:
        Variables:
          ParameterPath: !ImportValue
            Fn::Sub: ${ResourcesStackName}-AMIParameter
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:AddTagsToResource
                - ssm:GetParameters
                - ec2:*
              Resource: '*'
  DeleteOldAMIs:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      InlineCode: !Sub |
        import json
        import boto3
        import logging 
        import os

        logger = logging.getLogger()
        logger.setLevel(logging.INFO)

        ssm_client = boto3.client('ssm')
        ec2_client = boto3.client('ec2')
        ssm_parameter_name = os.getenv('ParameterPath')

        def handler(event, context):
            logger.info('Printing event: {}'.format(event))
            process_sns_event(event)
            return None

        def delete_ebs_snapshots():
            paginator = ec2_client.get_paginator('describe_snapshots')
            filters = {'OwnerIds': ['${AWS::AccountId}']}
            for page in paginator.paginate(**filters):
                for snapshot in page['Snapshots']:
                    try:
                        print('SNAPSHOT')
                        print(snapshot)
                        ec2_client.delete_snapshot(SnapshotId=snapshot['SnapshotId'])
                        print('DELETED EBS SNAPSHOT')
                        print(snapshot['SnapshotId'])
                    except Exception as e:
                        print('EXCEPTION DELETING SNAPSHOT')
                        print(e)

        def get_image_by_parameter():
            try:
                return ssm_client.get_parameter(Name=ssm_parameter_name)['Parameter']['Value']
            except:
                pass
            return None

        def get_amis_with_my_stack(current_image):
            stack_name = '${AWS::StackName}'
            filters = [
                {
                   'Name': 'is-public',
                   'Values': [
                       'false'
                   ]
                },
                {
                   'Name': 'state',
                   'Values': [
                       'available'
                   ]
                },
                {
                   'Name': 'tag:Stack',
                   'Values': [
                       '${AWS::StackName}'
                   ]
                }
            ]
            ignore_images = [current_image]
            image_from_parameters = get_image_by_parameter()
            if image_from_parameters:
                ignore_images.append(image_from_parameters)
            images = ec2_client.describe_images(Filters=filters, Owners=['${AWS::AccountId}'])['Images']
            images = list(map(lambda x: x['ImageId'], images))
            images = list(filter(lambda x: x not in ignore_images, images))
            for image in images: 
                logger.info('Deregistring Image: {}'.format(image))
                try:
                    ec2_client.deregister_image(ImageId=image)
                except:
                    pass

        def process_sns_event(event):
            for record in (event['Records']):
                event_message = record['Sns']['Message']

                message_json = json.loads(event_message)
                image_state = (message_json['state']['status'])

                if (image_state == 'AVAILABLE'):
                    current_image = message_json['outputResources']['amis'][0]['image']
                    get_amis_with_my_stack(current_image)

                delete_ebs_snapshots()
            return None

      Description: Delete old AMIs
      MemorySize: 256
      Timeout: 900
      AutoPublishAlias: live
      Environment:
        Variables:
          ParameterPath: !ImportValue
            Fn::Sub: ${ResourcesStackName}-AMIParameter
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameters
                - ec2:*
              Resource: '*'
